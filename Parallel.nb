(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     15873,        400]
NotebookOptionsPosition[     14612,        356]
NotebookOutlinePosition[     14954,        371]
CellTagsIndexPosition[     14911,        368]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 "There is a complete tutorial in \nThe Wolfram System Compiler \
(https://reference.wolfram.com/language/Compile/tutorial/Overview.html)\n\n\
There is also another tutorial for parallelizing a non-compiled function.\n\
Parallel Computing Tools User Guide \
(https://reference.wolfram.com/language/ParallelTools/tutorial/Overview.html).\
\nHowever, I seldom use parallelization for a non-compiled function. Because \
we usually use parallelization if we care about the speed, and if we really \
care about the speed, we will compile the function.\n\nBasically, the way \
Mathematica does parallel computing is:\n1. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " sets up each kernel on each core in CPU.\n2. When we call a compiled \
function with a List of the required type, we send a list of similar jobs to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". All jobs are calling one pure function with different arguments. The \
function is pure so that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " knows it can evaluate them in whatever order they want. Therefore, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will evenly send these jobs to each kernel, and wait until every job is \
finished.\n3. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will return a List of result after every job is done.\n\nThis notebook \
demonstrates how I use parallel computing in our research. "
}], "Text",
 CellChangeTimes->{{3.6563400747371593`*^9, 3.656340167001436*^9}, {
  3.656340200341343*^9, 3.6563402030474977`*^9}, {3.6563402393605747`*^9, 
  3.6563402678262033`*^9}, {3.6563434014754376`*^9, 3.6563434926516523`*^9}, {
  3.656343531539877*^9, 3.6563436466274595`*^9}, {3.656518052688796*^9, 
  3.6565180551379366`*^9}, {3.6565181287231455`*^9, 3.6565181289741597`*^9}, {
  3.6565181713035808`*^9, 3.656518450798567*^9}, {3.6565187119175024`*^9, 
  3.6565188649232535`*^9}, {3.656518914434086*^9, 3.656518922352538*^9}, {
  3.6565555749097853`*^9, 3.656555575620826*^9}, {3.6565556168431835`*^9, 
  3.656555643620715*^9}}],

Cell[TextData[{
 "First, check parallel evaluation works by the easiest parallel computing \
function ",
 Cell[BoxData[
  FormBox["ParallelEvaluate", TraditionalForm]]],
 ". This function is not that useful because it will send the exactly same \
jobs to each kernel."
}], "Text",
 CellChangeTimes->{{3.6563407083564*^9, 3.656340812997385*^9}, {
  3.65651810240164*^9, 3.6565181034767013`*^9}, {3.656555667687092*^9, 
  3.6565556697902117`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "CompiledFunctionTools`"}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", "\"\<Parallel`Developer`\>\"", "]"}], "\n", 
 RowBox[{"Print", "[", "$ProcessorCount", "]"}], "\n", "$ContextPath", "\n", 
 RowBox[{"ParallelEvaluate", "[", "$ProcessID", "]"}], "\n", 
 RowBox[{"Print", "[", 
  RowBox[{"ParallelEvaluate", "[", "$MachineName", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.65634068178588*^9, 3.656340682153901*^9}}],

Cell[BoxData["2"], "Print",
 CellChangeTimes->{3.656340603385396*^9, 3.656340697061754*^9, 
  3.656341562728267*^9, 3.656341602862563*^9, 3.6563419741668005`*^9, 
  3.656518544844946*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Parallel`Developer`\"\>", 
   ",", "\<\"Parallel`Debug`Perfmon`\"\>", ",", "\<\"Parallel`Debug`\"\>", 
   ",", "\<\"CompiledFunctionTools`\"\>", ",", "\<\"CloudObjectLoader`\"\>", 
   ",", "\<\"StreamingLoader`\"\>", ",", "\<\"IconizeLoader`\"\>", 
   ",", "\<\"PacletManager`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.656340603385396*^9, 3.6563406970697546`*^9, 
  3.6563415627342677`*^9, 3.656341602869563*^9, 3.6563419741738005`*^9, 
  3.656518544854947*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4812", ",", "2732"}], "}"}]], "Output",
 CellChangeTimes->{3.656340603385396*^9, 3.6563406970697546`*^9, 
  3.6563415627342677`*^9, 3.656341602869563*^9, 3.6563419741738005`*^9, 
  3.65651854683706*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"vaio-svs13a290x\"\>", ",", "\<\"vaio-svs13a290x\"\>"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.656340603385396*^9, 3.656340697061754*^9, 
  3.656341562728267*^9, 3.656341602862563*^9, 3.6563419741668005`*^9, 
  3.6565185468380604`*^9}]
}, Open  ]],

Cell["\<\
After we evaluated the above cell, we can check the parallel kernels by \
clicking menu \[OpenCurlyDoubleQuote]Evaluation\[CloseCurlyDoubleQuote] > \
\[OpenCurlyDoubleQuote]Parallel Kernel Status...\[CloseCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.656341121171012*^9, 3.656341225421974*^9}, {
  3.6565557342488985`*^9, 3.656555767562804*^9}}],

Cell[TextData[{
 "A simple parallel computing compiled function, i.e., ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"RuntimeAttributes", "\[Rule]", "Listable"}], ",", 
    RowBox[{"Parallelization", "\[Rule]", "True"}]}], TraditionalForm]]],
 ". This means that if the argument is a List of the specified type, it will \
run parallel computing on each elements in the List."
}], "Text",
 CellChangeTimes->{{3.6563407083564*^9, 3.656340812997385*^9}, {
  3.6563410616336064`*^9, 3.6563410639957414`*^9}, {3.6563412379206896`*^9, 
  3.656341359454641*^9}, {3.6565189974868355`*^9, 3.656519020950178*^9}, {
  3.6565558249260855`*^9, 3.6565558400639505`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"cModp$P", " ", "=", " ", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"z", ",", "_Integer"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"p", ",", "_Integer"}], "}"}]}], "}"}], ",", 
     RowBox[{"Mod", "[", 
      RowBox[{"z", ",", "p", ",", 
       RowBox[{"Quotient", "[", 
        RowBox[{
         RowBox[{"1", "-", "p"}], ",", "2"}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"RuntimeAttributes", "\[Rule]", "Listable"}], ",", 
     RowBox[{"Parallelization", "\[Rule]", "True"}], ",", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}], 
       "}"}]}], ",", 
     RowBox[{"RuntimeOptions", "\[Rule]", "\"\<Speed\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cModp$NP", " ", "=", " ", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"z", ",", "_Integer"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"p", ",", "_Integer"}], "}"}]}], "}"}], ",", 
     RowBox[{"Mod", "[", 
      RowBox[{"z", ",", "p", ",", 
       RowBox[{"Quotient", "[", 
        RowBox[{
         RowBox[{"1", "-", "p"}], ",", "2"}], "]"}]}], "]"}], ",", 
     RowBox[{"RuntimeAttributes", "\[Rule]", "Listable"}], ",", 
     RowBox[{"Parallelization", "\[Rule]", "False"}], ",", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}], 
       "}"}]}], ",", 
     RowBox[{"RuntimeOptions", "\[Rule]", "\"\<Speed\>\""}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.656293605475088*^9, 3.6562936187451067`*^9}, {
  3.656341661365909*^9, 3.656341671398483*^9}, {3.6563419357416024`*^9, 
  3.6563419610370493`*^9}}],

Cell["\<\
The type of parameter is the type declared in the function definition. No \
parallel compution occurs.\
\>", "Text",
 CellChangeTimes->{{3.6563413950346756`*^9, 3.6563414204671307`*^9}, {
  3.6563414679868484`*^9, 3.6563415016487737`*^9}, {3.656519041810371*^9, 
  3.656519074867262*^9}, {3.6565558654184012`*^9, 3.6565558672225046`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cModp$P", "[", 
  RowBox[{"2", ",", "3"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"cModp$NP", "[", 
  RowBox[{"2", ",", "3"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6563413673870945`*^9, 3.6563413709002953`*^9}, {
  3.656341994519964*^9, 3.656342001626371*^9}}],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{{3.656341372077363*^9, 3.65634137674963*^9}, 
   3.656341571620776*^9, 3.6563416408827376`*^9, {3.6563419894046717`*^9, 
   3.656342002575425*^9}, 3.656518547172079*^9, 3.65655587029368*^9}],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{{3.656341372077363*^9, 3.65634137674963*^9}, 
   3.656341571620776*^9, 3.6563416408827376`*^9, {3.6563419894046717`*^9, 
   3.656342002575425*^9}, 3.656518547172079*^9, 3.65655587029668*^9}]
}, Open  ]],

Cell["\<\
We can see the parallel compiled function run faster than the unparallel one. \
However, it\[CloseCurlyQuote]s not twice faster, because some time are used \
to distribute jobs to parallel kernels.\
\>", "Text",
 CellChangeTimes->{{3.6563413950346756`*^9, 3.6563414204671307`*^9}, {
   3.6563414679868484`*^9, 3.6563415016487737`*^9}, {3.6563420690012245`*^9, 
   3.65634215371907*^9}, 3.6565559003804007`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"Length", "[", 
   RowBox[{"cModp$P", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10000000", "]"}], ",", "3"}], "]"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"Length", "[", 
   RowBox[{"cModp$NP", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10000000", "]"}], ",", "3"}], "]"}], "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.6563415082691526`*^9, 3.6563415230059953`*^9}, 
   3.6563415590950594`*^9, 3.656341590817874*^9, {3.656341649701242*^9, 
   3.6563417202412767`*^9}, {3.656341794868545*^9, 3.6563417951035585`*^9}, {
   3.656342007183689*^9, 3.6563420128400126`*^9}, {3.656342046800955*^9, 
   3.656342048063027*^9}, {3.6565188704235682`*^9, 3.656518882715271*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.0979982538734883`", ",", "10000000"}], "}"}]], "Output",
 CellChangeTimes->{
  3.656341587911708*^9, 3.6563416447719603`*^9, {3.656341722280393*^9, 
   3.656341736234191*^9}, 3.656341796057613*^9, 3.6563420144381037`*^9, 
   3.6563420504851656`*^9, 3.6565185482601414`*^9, 3.656519094887407*^9, 
   3.6565559982820005`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.617216793249632`", ",", "10000000"}], "}"}]], "Output",
 CellChangeTimes->{
  3.656341587911708*^9, 3.6563416447719603`*^9, {3.656341722280393*^9, 
   3.656341736234191*^9}, 3.656341796057613*^9, 3.6563420144381037`*^9, 
   3.6563420504851656`*^9, 3.6565185482601414`*^9, 3.656519094887407*^9, 
   3.656555999900093*^9}]
}, Open  ]],

Cell["Parallel function works for higher dimension.", "Text",
 CellChangeTimes->{{3.6563413950346756`*^9, 3.6563414204671307`*^9}, {
  3.6563414679868484`*^9, 3.6563415016487737`*^9}, {3.6563420690012245`*^9, 
  3.65634215371907*^9}, {3.6563422347427044`*^9, 3.6563422493495398`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"Length", "[", 
   RowBox[{"cModp$P", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"10000", ",", "1000"}], "}"}]}], "]"}], ",", "3"}], "]"}], 
   "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"Length", "[", 
   RowBox[{"cModp$NP", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"10000", ",", "1000"}], "}"}]}], "]"}], ",", "3"}], "]"}], 
   "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6563415082691526`*^9, 3.6563415230059953`*^9}, 
   3.6563415590950594`*^9, 3.656341590817874*^9, {3.656341649701242*^9, 
   3.6563417202412767`*^9}, {3.656341794868545*^9, 3.6563417951035585`*^9}, {
   3.656342007183689*^9, 3.6563420128400126`*^9}, {3.656342046800955*^9, 
   3.656342048063027*^9}, {3.656342167929883*^9, 3.656342169895995*^9}, {
   3.656342200517747*^9, 3.656342219768848*^9}, {3.656518886070463*^9, 
   3.656518899634239*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.1430641724496342`", ",", "10000"}], "}"}]], "Output",
 CellChangeTimes->{
  3.656341587911708*^9, 3.6563416447719603`*^9, {3.656341722280393*^9, 
   3.656341736234191*^9}, 3.656341796057613*^9, 3.6563420144381037`*^9, 
   3.6563420504851656`*^9, 3.6563422221999865`*^9, 3.6565185509872975`*^9, 
   3.656519102130821*^9, 3.656556008049559*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.691446280421406`", ",", "10000"}], "}"}]], "Output",
 CellChangeTimes->{
  3.656341587911708*^9, 3.6563416447719603`*^9, {3.656341722280393*^9, 
   3.656341736234191*^9}, 3.656341796057613*^9, 3.6563420144381037`*^9, 
   3.6563420504851656`*^9, 3.6563422221999865`*^9, 3.6565185509872975`*^9, 
   3.656519102130821*^9, 3.6565560097426558`*^9}]
}, Open  ]],

Cell[TextData[{
 "Notice this is compiled in Wolfram Language virtual machine. If the compile \
target is C, and a Listable compiled function called by another compiled \
function, the compiled function may crash as I shown in listableCompile.nb \
sent before. \nAlso, the parallel compiled function cannot use with recursive \
call as I shown in recursiveCompileParallel.nb because the parallel compiled \
function in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " must be pure, but ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " use MainEvaluate to handle the recursive call so far, and make a function \
not pure."
}], "Text",
 CellChangeTimes->{{3.6563423241968207`*^9, 3.6563423558526316`*^9}, {
   3.6563423877824574`*^9, 3.6563424660449343`*^9}, {3.6563425667676954`*^9, 
   3.6563425980904865`*^9}, {3.6563428768474307`*^9, 
   3.6563429300374727`*^9}, {3.6565560608955817`*^9, 3.656556170382844*^9}, 
   3.6565562271200895`*^9}],

Cell["\<\
Actually, Listable is really compatiable with parallelization. Prof. Ryan \
Newton has tought a course, B629 - Parallel Functional Languages and DSLs, \
may relate to this topic although I haven\[CloseCurlyQuote]t took it : )
http://www.cs.indiana.edu/~rrnewton/courses/B629_parfunc/
http://homes.soic.indiana.edu/classes/fall2014/csci/b629-rrnewton/\
advertisement.html\
\>", "Text",
 CellChangeTimes->{{3.656344188729466*^9, 3.6563443402121305`*^9}, {
  3.6565191571909704`*^9, 3.6565191607921762`*^9}}]
},
WindowSize->{778, 772},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"10.3 for Microsoft Windows (64-bit) (October 9, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 2077, 38, 353, "Text"],
Cell[2638, 60, 445, 10, 49, "Text"],
Cell[CellGroupData[{
Cell[3108, 74, 454, 7, 132, "Input"],
Cell[3565, 83, 187, 3, 23, "Print"],
Cell[3755, 88, 562, 10, 72, "Output"],
Cell[4320, 100, 242, 5, 31, "Output"],
Cell[4565, 107, 281, 6, 23, "Print"]
}, Open  ]],
Cell[4861, 116, 363, 6, 49, "Text"],
Cell[5227, 124, 663, 13, 68, "Text"],
Cell[5893, 139, 1904, 50, 172, "Input"],
Cell[7800, 191, 348, 6, 30, "Text"],
Cell[CellGroupData[{
Cell[8173, 201, 289, 6, 52, "Input"],
Cell[8465, 209, 255, 4, 31, "Output"],
Cell[8723, 215, 255, 4, 31, "Output"]
}, Open  ]],
Cell[8993, 222, 420, 7, 49, "Text"],
Cell[CellGroupData[{
Cell[9438, 233, 784, 17, 52, "Input"],
Cell[10225, 252, 365, 7, 31, "Output"],
Cell[10593, 261, 362, 7, 31, "Output"]
}, Open  ]],
Cell[10970, 271, 284, 3, 30, "Text"],
Cell[CellGroupData[{
Cell[11279, 278, 1068, 25, 52, "Input"],
Cell[12350, 305, 384, 7, 31, "Output"],
Cell[12737, 314, 385, 7, 31, "Output"]
}, Open  ]],
Cell[13137, 324, 953, 19, 125, "Text"],
Cell[14093, 345, 515, 9, 87, "Text"]
}
]
*)

(* End of internal cache information *)
